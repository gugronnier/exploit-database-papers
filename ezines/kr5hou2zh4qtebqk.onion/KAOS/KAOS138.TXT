Chaos Digest              Jeudi 27 Mai 1993        Volume 1 : Numero 38
                           ISSN  1244-4901

       Editeur: Jean-Bernard Condat (jbcondat@attmail.com)
       Archiviste: Yves-Marie Crabbe
       Co-Redacteurs: Arnaud Bigare, Stephane Briere

TABLE DES MATIERES, #1.38 (27 Mai 1993)
File 1--40H VMag Issue 1 Volume 3 #004(2) (reprint)

Chaos Digest is a weekly electronic journal/newsletter. Subscriptions are
available at no cost by sending a message to:
                linux-activists-request@niksula.hut.fi
with a mail header or first line containing the following informations:
                    X-Mn-Admin: join CHAOS_DIGEST

The editors may be contacted by voice (+33 1 47874083), fax (+33 1 47877070)
or S-mail at: Jean-Bernard Condat, Chaos Computer Club France [CCCF], B.P.
155, 93404 St-Ouen Cedex, France.  He is a member of the EICAR and EFF (#1299)
groups.

Issues of ChaosD can also be found from the ComNet in Luxembourg BBS (+352)
466893.  Back issues of ChaosD can be found on the Internet as part of the
Computer underground Digest archives. They're accessible using anonymous FTP:

        * kragar.eff.org [192.88.144.4] in /pub/cud/chaos
        * uglymouse.css.itd.umich.edu [141.211.182.53] in /pub/CuD/chaos
        * halcyon.com [192.135.191.2] in /pub/mirror/cud/chaos
        * ftp.cic.net [192.131.22.2] in /e-serials/alphabetic/c/chaos-digest
        * ftp.ee.mu.oz.au [128.250.77.2] in /pub/text/CuD/chaos
        * nic.funet.fi [128.214.6.100] in /pub/doc/cud/chaos
        * orchid.csv.warwick.ac.uk [137.205.192.5] in /pub/cud/chaos

CHAOS DIGEST is an open forum dedicated to sharing French information among
computerists and to the presentation and debate of diverse views. ChaosD
material may be reprinted for non-profit as long as the source is cited.
Some authors do copyright their material, and they should be contacted for
reprint permission.  Readers are encouraged to submit reasoned articles in
French, English or German languages relating to computer culture and
telecommunications.  Articles are preferred to short responses.  Please
avoid quoting previous posts unless absolutely necessary.

DISCLAIMER: The views represented herein do not necessarily represent
            the views of the moderators. Chaos Digest contributors
            assume all responsibility for ensuring that articles
            submitted do not violate copyright protections.

----------------------------------------------------------------------

Date: Tue May 11 09:24:40 PDT 1993
From: 0005847161@mcimail.com (American_Eagle_Publication_Inc. )
Subject: File 1--40H VMag Issue 1 Volume 3 #004(2) (reprint)

[suite du listing du SCAN de John McAfee]

sub_4:
                mov     bx,ax
                mov     cl,4
                shr     bx,cl
                call    sub_5
                mov     bx,ax

sub_5:
                and     bx,0Fh
                mov     dl,data_19[bx]

sub_6:
loc_15:
                push    ax
                mov     ah,2
                int     21h
                pop     ax
                retn

sub_7:
                mov     dl,2Dh
                jmp     short loc_15

sub_8:
                mov     dl,0Dh
                call    sub_6
                mov     dl,0Ah
                jmp     short loc_15
loc_16:
                mov     dx,624h
                mov     cx,29h
loc_17:
                mov     bx,2
                push    ax
                mov     ah,40h
                int     21h
                jc      loc_18
                pop     ax
loc_18:
                mov     ah,4Ch
                int     21h
sub_3           endp

sub_9           proc    near
                xor     bx,bx
                xor     cx,cx
                inc     si
                lodsb
loc_19:
                mov     cl,al
                mov     ax,1
                shl     ax,cl
                or      bx,ax
                lodsb
                cmp     al,0C8h
                jb      loc_19
                mov     cl,8
                mov     di,656h
                mov     ax,bx
loc_20:
                stosw
                shr     ax,1
                jnc     loc_21
                xor     ax,bx
loc_21:
                dec     cl
                jnz     loc_20
                retn
sub_9           endp

sub_10          proc    near
                mov     si,656h
                xor     dx,dx
loc_22:
                mov     cx,dx
                mov     bx,si
                xor     ax,ax
loc_23:
                shl     cl,1
                jnc     loc_24
                xor     ax,[bx]
loc_24:
                add     bx,2
                or      cl,cl
                jnz     loc_23
                stosw
                inc     dl
                jnz     loc_22
                retn
sub_10          endp

sub_11          proc    near
loc_25:
                lodsb
                mov     bl,cl
                xor     bl,al
                xor     bh,bh
                mov     cl,ch
                mov     ch,0
                add     bx,bx
                xor     cx,[bx+di]
                dec     dx
                jnz     loc_25
                retn
sub_11          endp

data_27         dw      4240h
data_28         dw      0Fh
data_29         dw      3E8h
data_30         dw      0Ah

sub_12          proc    near
                cmp     dx,data_28
                jb      loc_32
                ja      loc_26
                cmp     ax,data_27
                jb      loc_32
loc_26:
                mov     bx,data_27
                mov     cx,data_28
                xor     si,si
loc_27:
                inc     si
                shl     bx,1
                rcl     cx,1
                jno     loc_27
                xor     di,di
loc_28:
                shl     di,1
                cmp     dx,cx
                jb      loc_30
                ja      loc_29
                cmp     ax,bx
                jb      loc_30
loc_29:
                sub     ax,bx
                sbb     dx,cx
                inc     di
loc_30:
                shr     cx,1
                rcr     bx,1
                dec     si
                jge     loc_28
                push    dx
                push    ax
                mov     ax,di
                xor     dx,dx
                call    sub_14
                mov     al,2Ch
                call    sub_19
                pop     ax
                pop     dx
                div     data_29
                push    dx
                call    sub_15
                jmp     short loc_33

sub_13:
                xor     dx,dx
                cmp     ax,2710h
                jae     loc_32
                cmp     ax,3E8h
                jb      loc_32
                div     data_29
                or      ax,ax
                push    dx
                jz      loc_31
                call    sub_16
loc_31:
                pop     ax
                jmp     short loc_34

sub_14:
loc_32:
                div     data_29
                push    dx
                or      ax,ax
                jz      loc_31
                call    sub_16
loc_33:
                mov     al,2Ch
                call    sub_19
                pop     ax

sub_15:
                xor     dx,dx
                div     data_30
                jmp     loc_35
                db      88h, 0E0h, 32h, 0E4h

sub_16:
loc_34:
                cmp     ax,0Ah
                jb      loc_37
                xor     dx,dx
                div     data_30
                cmp     al,0Ah
                jb      loc_36
loc_35:
                push    dx
                xor     dx,dx
                div     data_30
                call    sub_17
                pop     ax
                jmp     loc_37

sub_17:
loc_36:
                push    dx
                call    sub_18
                pop     ax

sub_18:
loc_37:
                add     al,30h

sub_19:
                mov     ah,2
                mov     dl,al
                int     21h
                retn
sub_12          endp

                db      0Dh, 0Ah, ' Sorry, I cannot open '
                db      'the input file.', 0Dh, 0Ah, 0Dh, 0Ah
                db      ' Sorry, I cannot read the input '
                db      'file.', 0Dh, 0Ah
                db      90h
data_32         dw      0
data_33         dw      0
data_34         dw      0
data_35         dw      0
                db      0ACh, 29h, 0ADh, 29h, 0AEh, 29h
                db      0AFh, 29h, 0B0h, 29h, 0E9h, 70h
                db      2, 0E9h, 49h, 2
                db      14 dup (0)
                db      0E9h, 0C7h, 0, 0Dh, 0, 0
                db      0
                db      44h, 29h
                db      42 dup (0)
                db      0CCh, 7, 6, 7
                db      13 dup (0)
                db      3, 2, 0CFh, 0C8h, 0Dh, 0C9h
                db      0Dh
                db      79 dup (0)
                db      0Dh, 0Ah, 'Please enter the passw'
                db      'ord now: '
                db      0
                db      0Dh, 0Ah, 'This program requires '
                db      'DOS 3.00 or greater'
                db      7, 0Dh, 0Ah, 0, 5Ch, 2Ah
                db      2Eh, 2Ah, 0
                db      0Dh, 0Ah, '%%211#---4677^^^%'
                db      7, 0Dh, 0Ah, 0, 42h, 23h
                db      0
                db      305 dup (0)
                db      50h, 53h, 0A1h, 1, 1, 5
                db      3, 1, 0D1h, 0E8h, 0D1h, 0E8h
                db      0D1h, 0E8h, 0D1h, 0E8h, 8Bh, 0D8h
                db      8Ch, 0C8h, 3, 0C3h, 50h, 0B8h
                db      6Bh, 2, 50h, 0CBh, 5Bh, 58h
                db      2Eh, 0C6h, 6, 1Ah, 0, 0FFh
                db      2Eh, 8Ch, 6, 1Bh, 1, 2Eh
                db      0A3h, 1Dh, 1, 2Eh, 89h, 26h
                db      1Fh, 1, 2Eh, 8Ch, 16h, 21h
                db      1, 8Ch, 0C8h, 8Eh, 0D0h, 0BCh
                db      4Fh, 2, 2Eh, 0A1h, 1Dh, 1
                db      50h, 53h, 51h, 52h, 56h, 57h
                db      55h, 1Eh, 6, 8Ch, 0C8h, 8Eh
                db      0D8h, 8Eh, 0C0h, 0A0h, 1Bh, 0
                db      3Ch, 50h, 75h, 6, 0E8h, 6Ah
                db      0, 0EBh, 15h, 90h, 3Ch, 44h
                db      75h, 6, 0E8h, 78h, 0, 0EBh
                db      0Bh, 90h
loc_38:
                cmp     al,4Ch
                jne     loc_39
                call    sub_21
                jmp     short loc_40
loc_39:
                stc
loc_40:
                pop     es
                pop     ds
                pop     bp
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                cmp     byte ptr cs:data_7e,0
                je      loc_41
                mov     ax,cs:data_4e
                mov     ds:data_1e,ax
                mov     ax,cs:data_5e
                mov     ds:data_2e,ax
                mov     ax,100h
                mov     cs:data_4e,ax
                mov     cs:data_5e,ds
                jmp     short loc_42
loc_41:
                mov     ax,cs
                sub     ax,cs:data_6e
                add     cs:data_5e,ax
loc_42:
                pop     ax
                mov     ss,word ptr cs:[121h]
                mov     sp,word ptr cs:[11Fh]
                jmp     dword ptr cs:data_4e
                db      0BAh, 4, 1, 0E8h, 0BCh, 0
                db      0B8h, 0FFh, 4Ch, 0CDh, 21h, 0BAh
                db      0AEh, 0, 0E8h, 0B1h, 0, 0C6h
                db      6, 58h, 0, 29h, 0BAh, 58h
                db      0, 0E8h, 74h, 0, 0E8h, 0BDh
                db      0, 0E8h, 87h, 0, 0C3h

sub_20          proc    near
                mov     ah,2Ah
                int     21h
                cmp     cx,ds:data_8e
                jb      loc_44
                cmp     dh,ds:data_9e
                jb      loc_44
                cmp     dl,ds:data_10e
                jb      loc_44
                jmp     short loc_44
                db      90h, 0B4h, 30h, 0CDh, 21h, 3Ch
                db      3, 73h, 4, 0F8h, 0EBh, 25h
                db      90h, 1Eh, 6, 32h, 0C0h, 0B9h
                db      0, 80h, 2Eh, 8Eh, 6, 1Bh
                db      1, 26h, 8Eh, 6, 2Ch, 0
                db      33h, 0FFh
loc_43:
                repne   scasb
                scasb
                jnz     loc_43
                add     di,2
                push    es
                pop     ds
                mov     dx,di
                mov     ah,41h
                clc
                pop     es
                pop     ds
loc_44:
                cmc
                retn
sub_20          endp

sub_21          proc    near
                mov     ah,1Ah
                mov     dx,83h
                int     21h
                mov     ah,4Eh
                mov     cx,8
                mov     dx,0FFh
                int     21h
                mov     si,0A1h
                mov     di,4Bh
                cld
loc_45:
                lodsb
                scasb
                stc
                jnz     loc_ret_46
                or      al,al
                jnz     loc_45

loc_ret_46:
                retn
sub_21          endp

sub_22          proc    near
                push    ax
                push    bx
                push    cx
                mov     ah,0Ah
                int     21h
                mov     bx,dx
                inc     bx
                mov     cl,[bx]
                xor     ch,ch
                jcxz    loc_48

locloop_47:
                inc     bx
                not     byte ptr [bx]
                loop    locloop_47

loc_48:
                pop     cx
                pop     bx
                pop     ax
                retn
sub_22          endp

sub_23          proc    near
                push    cx
                push    si
                push    di
                mov     cl,ds:data_11e
                xor     ch,ch
                mov     si,59h
                mov     di,1Dh
                cld
                repe    cmpsb
                jz      loc_49
                stc
loc_49:
                pop     di
                pop     si
                pop     cx
                retn
sub_23          endp

sub_24          proc    near
                push    bx
                push    dx
                mov     bx,dx
loc_50:
                mov     dl,[bx]
                or      dl,dl
                jz      loc_51
                call    sub_25
                inc     bx
                jmp     short loc_50
loc_51:
                pop     dx
                pop     bx
                retn
sub_24          endp

sub_25          proc    near
                push    ax
                mov     ah,2
                int     21h
                pop     ax
                retn
sub_25          endp

sub_26          proc    near
                push    dx
                mov     dl,0Dh
                call    sub_25
                mov     dl,0Ah
                call    sub_25
                pop     dx
                retn
sub_26          endp

                db      0, 0, 0, 0, 0ACh, 29h
                db      0ADh, 29h, 0AEh, 29h, 0AFh, 29h
                db      0B0h, 29h, 0E9h, 70h, 2, 0E9h
                db      49h, 2
                db      14 dup (0)
                db      0E9h, 60h, 5, 0Dh, 0, 0
                db      0
                db      44h, 29h
                db      42 dup (0)
                db      0EAh, 7, 0Ch, 1Fh, 0
                db      12 dup (0)
                db      3, 2, 0CCh, 0CEh, 0Dh, 0C9h
                db      0Dh
                db      79 dup (0)
                db      0Dh, 0Ah, 'Please enter the passw'
                db      'ord now: '
                db      0
                db      0Dh, 0Ah, 'This program requires '
                db      'DOS 3.00 or greater'
                db      7, 0Dh, 0Ah, 0, 5Ch, 2Ah
                db      2Eh, 2Ah, 0
                db      0Dh, 0Ah, '%%211#---4677^^^%'
                db      7, 0Dh, 0Ah, 0, 42h, 23h
                db      0
                db      305 dup (0)
                db      50h, 53h, 0A1h, 1, 1, 5
                db      3, 1, 0D1h, 0E8h, 0D1h, 0E8h
                db      0D1h, 0E8h, 0D1h, 0E8h, 8Bh, 0D8h
                db      8Ch, 0C8h, 3, 0C3h, 50h, 0B8h
                db      6Bh, 2, 50h, 0CBh, 5Bh, 58h
                db      2Eh, 0C6h, 6, 1Ah, 0, 0FFh
                db      2Eh, 8Ch, 6, 1Bh, 1, 2Eh
                db      0A3h, 1Dh, 1, 2Eh, 89h, 26h
                db      1Fh, 1, 2Eh, 8Ch, 16h, 21h
                db      1, 8Ch, 0C8h, 8Eh, 0D0h, 0BCh
                db      4Fh, 2, 2Eh, 0A1h, 1Dh, 1
                db      50h, 53h, 51h, 52h, 56h, 57h
                db      55h, 1Eh, 6, 8Ch, 0C8h, 8Eh
                db      0D8h, 8Eh, 0C0h, 0A0h, 1Bh, 0
                db      3Ch, 50h, 75h, 6, 0E8h, 6Ah
                db      0, 0EBh, 15h, 90h, 3Ch, 44h
                db      75h, 6, 0E8h, 78h, 0, 0EBh
                db      0Bh, 90h
loc_52:
                cmp     al,4Ch
                jne     loc_53
                call    sub_28
                jmp     short loc_54
loc_53:
                stc
loc_54:
                pop     es
                pop     ds
                pop     bp
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                cmp     byte ptr cs:data_7e,0
                je      loc_55
                mov     ax,cs:data_4e
                mov     ds:data_1e,ax
                mov     ax,cs:data_5e
                mov     ds:data_2e,ax
                mov     ax,100h
                mov     cs:data_4e,ax
                mov     cs:data_5e,ds
                jmp     short loc_56
loc_55:
                mov     ax,cs
                sub     ax,cs:data_6e
                add     cs:data_5e,ax
loc_56:
                pop     ax
                mov     ss,word ptr cs:[121h]
                mov     sp,word ptr cs:[11Fh]
                jmp     dword ptr cs:data_4e
                db      0BAh, 4, 1, 0E8h, 0BCh, 0
                db      0B8h, 0FFh, 4Ch, 0CDh, 21h, 0BAh
                db      0AEh, 0, 0E8h, 0B1h, 0, 0C6h
                db      6, 58h, 0, 29h, 0BAh, 58h
                db      0, 0E8h, 74h, 0, 0E8h, 0BDh
                db      0, 0E8h, 87h, 0, 0C3h

sub_27          proc    near
                mov     ah,2Ah
                int     21h
                cmp     cx,ds:data_8e
                jb      loc_58
                cmp     dh,ds:data_9e
                jb      loc_58
                cmp     dl,ds:data_10e
                jb      loc_58
                jmp     short loc_58
                db      90h, 0B4h, 30h, 0CDh, 21h, 3Ch
                db      3, 73h, 4, 0F8h, 0EBh, 25h
                db      90h, 1Eh, 6, 32h, 0C0h, 0B9h
                db      0, 80h, 2Eh, 8Eh, 6, 1Bh
                db      1, 26h, 8Eh, 6, 2Ch, 0
                db      33h, 0FFh
loc_57:
                repne   scasb
                scasb
                jnz     loc_57
                add     di,2
                push    es
                pop     ds
                mov     dx,di
                mov     ah,41h
                clc
                pop     es
                pop     ds
loc_58:
                cmc
                retn
sub_27          endp

sub_28          proc    near
                mov     ah,1Ah
                mov     dx,83h
                int     21h
                mov     ah,4Eh
                mov     cx,8
                mov     dx,0FFh
                int     21h
                mov     si,0A1h
                mov     di,4Bh
                cld
loc_59:
                lodsb
                scasb
                stc
                jnz     loc_ret_60
                or      al,al
                jnz     loc_59

loc_ret_60:
                retn
sub_28          endp

sub_29          proc    near
                push    ax
                push    bx
                push    cx
                mov     ah,0Ah
                int     21h
                mov     bx,dx
                inc     bx
                mov     cl,[bx]
                xor     ch,ch
                jcxz    loc_62

locloop_61:
                inc     bx
                not     byte ptr [bx]
                loop    locloop_61

loc_62:
                pop     cx
                pop     bx
                pop     ax
                retn
sub_29          endp

sub_30          proc    near
                push    cx
                push    si
                push    di
                mov     cl,ds:data_11e
                xor     ch,ch
                mov     si,59h
                mov     di,1Dh
                cld
                repe    cmpsb
                jz      loc_63
                stc
loc_63:
                pop     di
                pop     si
                pop     cx
                retn
sub_30          endp

sub_31          proc    near
                push    bx
                push    dx
                mov     bx,dx
loc_64:
                mov     dl,[bx]
                or      dl,dl
                jz      loc_65
                call    sub_32
                inc     bx
                jmp     short loc_64
loc_65:
                pop     dx
                pop     bx
                retn
sub_31          endp

sub_32          proc    near
                push    ax
                mov     ah,2
                int     21h
                pop     ax
                retn
sub_32          endp
sub_33          proc    near
                push    dx
                mov     dl,0Dh
                call    sub_32
                mov     dl,0Ah
                call    sub_32
                pop     dx
                retn
sub_33          endp

                db      0, 0, 0, 0, 0ACh, 29h
                db      0ADh, 29h, 0AEh, 29h, 0AFh, 29h
                db      0B0h, 29h, 0E9h, 70h, 2, 0E9h
                db      49h, 2
                db      14 dup (0)
                db      0E9h, 60h, 9, 0Dh, 0, 0
                db      0
                db      44h, 29h
                db      42 dup (0)
                db      0C2h, 7, 9, 0Bh, 0
                db      12 dup (0)
                db      3, 2, 0CEh, 0CEh, 0Dh, 0C9h
                db      0Dh
                db      79 dup (0)
                db      0Dh, 0Ah, 'Please enter the passw'
                db      'ord now: '
                db      0
                db      0Dh, 0Ah, 'This program requires '
                db      'DOS 3.00 or greater'
                db      7, 0Dh, 0Ah, 0, 5Ch, 2Ah
                db      2Eh, 2Ah, 0
                db      0Dh, 0Ah, '%%211#---4677^^^%'
                db      7, 0Dh, 0Ah, 0, 42h, 23h
                db      0
                db      305 dup (0)
                db      50h, 53h, 0A1h, 1, 1, 5
                db      3, 1, 0D1h, 0E8h, 0D1h, 0E8h
                db      0D1h, 0E8h, 0D1h, 0E8h, 8Bh, 0D8h
                db      8Ch, 0C8h, 3, 0C3h, 50h, 0B8h
                db      6Bh, 2, 50h, 0CBh, 5Bh, 58h
                db      2Eh, 0C6h, 6, 1Ah, 0, 0FFh
                db      2Eh, 8Ch, 6, 1Bh, 1, 2Eh
                db      0A3h, 1Dh, 1, 2Eh, 89h, 26h
                db      1Fh, 1, 2Eh, 8Ch, 16h, 21h
                db      1, 8Ch, 0C8h, 8Eh, 0D0h, 0BCh
                db      4Fh, 2, 2Eh, 0A1h, 1Dh, 1
                db      50h, 53h, 51h, 52h, 56h, 57h
                db      55h, 1Eh, 6, 8Ch, 0C8h, 8Eh
                db      0D8h, 8Eh, 0C0h, 0A0h, 1Bh, 0
                db      3Ch, 50h, 75h, 6, 0E8h, 6Ah
                db      0, 0EBh, 15h, 90h, 3Ch, 44h
                db      75h, 6, 0E8h, 78h, 0, 0EBh
                db      0Bh, 90h
loc_66:
                cmp     al,4Ch
                jne     loc_67
                call    sub_35
                jmp     short loc_68
loc_67:
                stc
loc_68:
                pop     es
                pop     ds
                pop     bp
                pop     di
                pop     si
                pop     dx
                pop     cx
                pop     bx
                cmp     byte ptr cs:data_7e,0
                je      loc_69
                mov     ax,cs:data_4e
                mov     ds:data_1e,ax
                mov     ax,cs:data_5e
                mov     ds:data_2e,ax
                mov     ax,100h
                mov     cs:data_4e,ax
                mov     cs:data_5e,ds
                jmp     short loc_70

loc_69:
                mov     ax,cs
                sub     ax,cs:data_6e
                add     cs:data_5e,ax
loc_70:
                pop     ax
                mov     ss,word ptr cs:[121h]
                mov     sp,word ptr cs:[11Fh]
                jmp     dword ptr cs:data_4e
                db      0BAh, 4, 1, 0E8h, 0BCh, 0
                db      0B8h, 0FFh, 4Ch, 0CDh, 21h, 0BAh
                db      0AEh, 0, 0E8h, 0B1h, 0, 0C6h
                db      6, 58h, 0, 29h, 0BAh, 58h
                db      0, 0E8h, 74h, 0, 0E8h, 0BDh
                db      0, 0E8h, 87h, 0, 0C3h

sub_34          proc    near
                mov     ah,2Ah
                int     21h
                cmp     cx,ds:data_8e
                jb      loc_72
                cmp     dh,ds:data_9e
                jb      loc_72
                cmp     dl,ds:data_10e
                jb      loc_72
                jmp     short loc_72
                db      90h, 0B4h, 30h, 0CDh, 21h, 3Ch
                db      3, 73h, 4, 0F8h, 0EBh, 25h
                db      90h, 1Eh, 6, 32h, 0C0h, 0B9h
                db      0, 80h, 2Eh, 8Eh, 6, 1Bh
                db      1, 26h, 8Eh, 6, 2Ch, 0
                db      33h, 0FFh
loc_71:
                repne   scasb
                scasb
                jnz     loc_71
                add     di,2
                push    es
                pop     ds
                mov     dx,di
                mov     ah,41h
                clc
                pop     es
                pop     ds
loc_72:
                cmc
                retn
sub_34          endp

sub_35          proc    near
                mov     ah,1Ah
                mov     dx,83h
                int     21h
                mov     ah,4Eh
                mov     cx,8
                mov     dx,0FFh
                int     21h
                mov     si,0A1h
                mov     di,4Bh
                cld
loc_73:
                lodsb
                scasb
                stc
                jnz     loc_ret_74
                or      al,al
                jnz     loc_73

loc_ret_74:
                retn
sub_35          endp

sub_36          proc    near
                push    ax
                push    bx
                push    cx
                mov     ah,0Ah
                int     21h
                mov     bx,dx
                inc     bx
                mov     cl,[bx]
                xor     ch,ch
                jcxz    loc_76

locloop_75:
                inc     bx
                not     byte ptr [bx]
                loop    locloop_75

loc_76:
                pop     cx
                pop     bx
                pop     ax
                retn
sub_36          endp

sub_37          proc    near
                push    cx
                push    si
                push    di
                mov     cl,ds:data_11e
                xor     ch,ch
                mov     si,59h
                mov     di,1Dh
                cld
                repe    cmpsb
                jz      loc_77
                stc
loc_77:
                pop     di
                pop     si
                pop     cx
                retn
sub_37          endp

sub_38          proc    near
                push    bx
                push    dx
                mov     bx,dx
loc_78:
                mov     dl,[bx]
                or      dl,dl
                jz      loc_79
                call    sub_39
                inc     bx
                jmp     short loc_78
loc_79:
                pop     dx
                pop     bx
                retn
sub_38          endp

------------------------------

End of Chaos Digest #1.38
************************************

Downloaded From P-80 International Information Systems 304-744-2253
