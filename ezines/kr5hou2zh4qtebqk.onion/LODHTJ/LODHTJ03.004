

---------------------- Shooting Shark's PW Hacker Update ---------------------


    The following is a reprint of Shooting Sharks' post which he provides
another program which can be typed quickly or uploaded to the unix system of
your choice. This program can be used to ensure that the algorithm does work
and you could then proceed to upload his program from Issue #2 for more
extensive password finding. I was able to get his HPW.C program to run
perfectly, and have found quite a few passwords by having it check passwords
with dictionary entries and other files of probable passwords.
						      -Lex Luthor


Taken from: The Free World II 301-668-7657 BBS (no longer up)


%> When: 9-19-87 at 3:46 am

    Since three people have told me my source won't compile on their system,
I've taken the suggestion and put together a *very* stripped-down version of
my HPW.C program from Issue #2.  Now it's basically a 20-line engine that you
can use to verify that the algorithm does indeed work (try it with your own
password) and then add whatever bells and whistles you want (like reading
words from a file, etc.)  The version presented here just prompts the user
for the encrypted password string, and then goes into an endless loop where it
reads a password attempt from the keyboard, encrypts and compares it, and
tells the user if it's the correct password.  It calls no external routines
besides crypt(), printf(), scanf(), strcmp() and exit().  crypt() is
absolutely essential to the program, and the rest are defined in K&R so this
program had *better* work on your unix system!

    Here it is.  Sorry for the hassles the old version gave anybody although
some people were able to get it to run quite nicely.


- - - - - - - - - - - - - - - - - cut here - - - - - - - - - - - - - - - - - -

int	len;

char	crbuf[30], *crypt(), *pw, pwbuf[10];

main()
$


	printf("first, carefully type the ENCRYPTED password string:Xn>");
	scanf("%s",crbuf);
	printf("Now, type a password attempt at the prompt.  type QUITXn");
	printf("(yes, in caps) on a blank line to quit...XnXn");
	for (;;) $
		printf("try >");
		scanf("%s",pwbuf);
		if (!strcmp(pwbuf,"QUIT"))
			break;
		pw = crypt(pwbuf,crbuf);
		if (!strcmp(pw,crbuf)) $
			printf(" ==> %s is correct.Xn",pwbuf);
			exit(0);


	printf("done.Xn");


- - - - - - - - - - - - - - - - - cut here - - - - - - - - - - - - - - - - - -


